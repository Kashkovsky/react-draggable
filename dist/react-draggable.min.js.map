{"version":3,"file":"react-draggable.min.js","sources":["../node_modules/object-assign/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/classnames/index.js","../lib/utils/shims.js","../lib/utils/getPrefix.js","../lib/utils/domFns.js","../lib/utils/positionFns.js","../lib/DraggableCore.js","../lib/Draggable.js","../lib/PositionedDraggable.js","../lib/umd.js"],"sourcesContent":["/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// @flow\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\nexport function findInArray(array: Array<any> | TouchList, callback: Function): any {\n  for (let i = 0, length = array.length; i < length; i++) {\n    if (callback.apply(callback, [array[i], i, array])) return array[i];\n  }\n}\n\nexport function isFunction(func: any): boolean {\n  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n}\n\nexport function isNum(num: any): boolean {\n  return typeof num === 'number' && !isNaN(num);\n}\n\nexport function int(a: string): number {\n  return parseInt(a, 10);\n}\n\nexport function dontSetMe(props: Object, propName: string, componentName: string) {\n  if (props[propName]) {\n    return new Error(`Invalid prop ${propName} passed to ${componentName} - do not set this, set it on the child.`);\n  }\n}\n","// @flow\nconst prefixes = ['Moz', 'Webkit', 'O', 'ms'];\nexport function getPrefix(prop: string='transform'): string {\n  // Checking specifically for 'window.document' is for pseudo-browser server-side\n  // environments that define 'window' as the global context.\n  // E.g. React-rails (see https://github.com/reactjs/react-rails/pull/84)\n  if (typeof window === 'undefined' || typeof window.document === 'undefined') return '';\n\n  const style = window.document.documentElement.style;\n\n  if (prop in style) return '';\n\n  for (let i = 0; i < prefixes.length; i++) {\n    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];\n  }\n\n  return '';\n}\n\nexport function browserPrefixToKey(prop: string, prefix: string): string {\n  return prefix ? `${prefix}${kebabToTitleCase(prop)}` : prop;\n}\n\nexport function browserPrefixToStyle(prop: string, prefix: string): string {\n  return prefix ? `-${prefix.toLowerCase()}-${prop}` : prop;\n}\n\nfunction kebabToTitleCase(str: string): string {\n  let out = '';\n  let shouldCapitalize = true;\n  for (let i = 0; i < str.length; i++) {\n    if (shouldCapitalize) {\n      out += str[i].toUpperCase();\n      shouldCapitalize = false;\n    } else if (str[i] === '-') {\n      shouldCapitalize = true;\n    } else {\n      out += str[i];\n    }\n  }\n  return out;\n}\n\n// Default export is the prefix itself, like 'Moz', 'Webkit', etc\n// Note that you may have to re-test for certain things; for instance, Chrome 50\n// can handle unprefixed `transform`, but not unprefixed `user-select`\nexport default getPrefix();\n","// @flow\nimport {findInArray, isFunction, int} from './shims';\nimport browserPrefix, {browserPrefixToKey} from './getPrefix';\n\nimport type {ControlPosition, MouseTouchEvent} from './types';\n\nlet matchesSelectorFunc = '';\nexport function matchesSelector(el: Node, selector: string): boolean {\n  if (!matchesSelectorFunc) {\n    matchesSelectorFunc = findInArray([\n      'matches',\n      'webkitMatchesSelector',\n      'mozMatchesSelector',\n      'msMatchesSelector',\n      'oMatchesSelector'\n    ], function(method){\n      // $FlowIgnore: Doesn't think elements are indexable\n      return isFunction(el[method]);\n    });\n  }\n\n  // Might not be found entirely (not an Element?) - in that case, bail\n  // $FlowIgnore: Doesn't think elements are indexable\n  if (!isFunction(el[matchesSelectorFunc])) return false;\n\n  // $FlowIgnore: Doesn't think elements are indexable\n  return el[matchesSelectorFunc](selector);\n}\n\n// Works up the tree to the draggable itself attempting to match selector.\nexport function matchesSelectorAndParentsTo(el: Node, selector: string, baseNode: Node): boolean {\n  let node = el;\n  do {\n    if (matchesSelector(node, selector)) return true;\n    if (node === baseNode) return false;\n    node = node.parentNode;\n  } while (node);\n\n  return false;\n}\n\nexport function addEvent(el: ?Node, event: string, handler: Function): void {\n  if (!el) { return; }\n  if (el.attachEvent) {\n    el.attachEvent('on' + event, handler);\n  } else if (el.addEventListener) {\n    el.addEventListener(event, handler, true);\n  } else {\n    // $FlowIgnore: Doesn't think elements are indexable\n    el['on' + event] = handler;\n  }\n}\n\nexport function removeEvent(el: ?Node, event: string, handler: Function): void {\n  if (!el) { return; }\n  if (el.detachEvent) {\n    el.detachEvent('on' + event, handler);\n  } else if (el.removeEventListener) {\n    el.removeEventListener(event, handler, true);\n  } else {\n    // $FlowIgnore: Doesn't think elements are indexable\n    el['on' + event] = null;\n  }\n}\n\nexport function outerHeight(node: HTMLElement): number {\n  // This is deliberately excluding margin for our calculations, since we are using\n  // offsetTop which is including margin. See getBoundPosition\n  let height = node.clientHeight;\n  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n  height += int(computedStyle.borderTopWidth);\n  height += int(computedStyle.borderBottomWidth);\n  return height;\n}\n\nexport function outerWidth(node: HTMLElement): number {\n  // This is deliberately excluding margin for our calculations, since we are using\n  // offsetLeft which is including margin. See getBoundPosition\n  let width = node.clientWidth;\n  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n  width += int(computedStyle.borderLeftWidth);\n  width += int(computedStyle.borderRightWidth);\n  return width;\n}\nexport function innerHeight(node: HTMLElement): number {\n  let height = node.clientHeight;\n  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n  height -= int(computedStyle.paddingTop);\n  height -= int(computedStyle.paddingBottom);\n  return height;\n}\n\nexport function innerWidth(node: HTMLElement): number {\n  let width = node.clientWidth;\n  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n  width -= int(computedStyle.paddingLeft);\n  width -= int(computedStyle.paddingRight);\n  return width;\n}\n\n// Get from offsetParent\nexport function offsetXYFromParent(evt: {clientX: number, clientY: number}, offsetParent: HTMLElement): ControlPosition {\n  const isBody = offsetParent === offsetParent.ownerDocument.body;\n  const offsetParentRect = isBody ? {left: 0, top: 0} : offsetParent.getBoundingClientRect();\n\n  const x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;\n  const y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;\n\n  return {x, y};\n}\n\nexport function createCSSTransform({x, y}: {x: number, y: number}): Object {\n  // Replace unitless items with px\n  return {[browserPrefixToKey('transform', browserPrefix)]: 'translate(' + x + 'px,' + y + 'px)'};\n}\n\nexport function createSVGTransform({x, y}: {x: number, y: number}): string {\n  return 'translate(' + x + ',' + y + ')';\n}\n\nexport function getTouch(e: MouseTouchEvent, identifier: number): ?{clientX: number, clientY: number} {\n  return (e.targetTouches && findInArray(e.targetTouches, t => identifier === t.identifier)) ||\n         (e.changedTouches && findInArray(e.changedTouches, t => identifier === t.identifier));\n}\n\nexport function getTouchIdentifier(e: MouseTouchEvent): ?number {\n  if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;\n  if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;\n}\n\n// User-select Hacks:\n//\n// Useful for preventing blue highlights all over everything when dragging.\n\n// Note we're passing `document` b/c we could be iframed\nexport function addUserSelectStyles(doc: ?Document) {\n  if (!doc) return;\n  let styleEl = doc.getElementById('react-draggable-style-el');\n  if (!styleEl) {\n    styleEl = doc.createElement('style');\n    styleEl.type = 'text/css';\n    styleEl.id = 'react-draggable-style-el';\n    styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {background: transparent;}\\n';\n    styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {background: transparent;}\\n';\n    doc.getElementsByTagName('head')[0].appendChild(styleEl);\n  }\n  if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');\n}\n\nexport function removeUserSelectStyles(doc: ?Document) {\n  try {\n    if (doc && doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection');\n    // $FlowIgnore: IE\n    if (doc.selection) {\n      // $FlowIgnore: IE\n      doc.selection.empty();\n    } else {\n      window.getSelection().removeAllRanges();  // remove selection caused by scroll\n    }\n  } catch (e) {\n    // probably IE\n  }\n}\n\nexport function styleHacks(childStyle: Object = {}): Object {\n  // Workaround IE pointer events; see #51\n  // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278\n  return {\n    touchAction: 'none',\n    ...childStyle\n  };\n}\n\nexport function addClassName(el: HTMLElement, className: string) {\n  if (el.classList) {\n    el.classList.add(className);\n  } else {\n    if (!el.className.match(new RegExp(`(?:^|\\\\s)${className}(?!\\\\S)`))) {\n      el.className += ` ${className}`;\n    }\n  }\n}\n\nexport function removeClassName(el: HTMLElement, className: string) {\n  if (el.classList) {\n    el.classList.remove(className);\n  } else {\n    el.className = el.className.replace(new RegExp(`(?:^|\\\\s)${className}(?!\\\\S)`, 'g'), '');\n  }\n}\n","// @flow\nimport {isNum, int} from './shims';\nimport ReactDOM from 'react-dom';\nimport {getTouch, innerWidth, innerHeight, offsetXYFromParent, outerWidth, outerHeight} from './domFns';\n\nimport type Draggable from '../Draggable';\nimport type PositionedDraggable from '../PositionedDraggable';\nimport type {Bounds, ControlPosition, DraggableData, MouseTouchEvent} from './types';\nimport type DraggableCore from '../DraggableCore';\n\nexport function getBoundPosition(draggable: Draggable | PositionedDraggable, x: number, y: number): [number, number] {\n  // If no bounds, short-circuit and move on\n  if (!draggable.props.bounds) return [x, y];\n\n  // Clone new bounds\n  let {bounds} = draggable.props;\n  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);\n  const node = findDOMNode(draggable);\n\n  if (typeof bounds === 'string') {\n    const {ownerDocument} = node;\n    const ownerWindow = ownerDocument.defaultView;\n    let boundNode;\n    if (bounds === 'parent') {\n      boundNode = node.parentNode;\n    } else {\n      boundNode = ownerDocument.querySelector(bounds);\n    }\n    if (!(boundNode instanceof ownerWindow.HTMLElement)) {\n      throw new Error('Bounds selector \"' + bounds + '\" could not find an element.');\n    }\n    const nodeStyle = ownerWindow.getComputedStyle(node);\n    const boundNodeStyle = ownerWindow.getComputedStyle(boundNode);\n    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n    bounds = {\n      left: -node.offsetLeft + int(boundNodeStyle.paddingLeft) + int(nodeStyle.marginLeft),\n      top: -node.offsetTop + int(boundNodeStyle.paddingTop) + int(nodeStyle.marginTop),\n      right: innerWidth(boundNode) - outerWidth(node) - node.offsetLeft +\n        int(boundNodeStyle.paddingRight) - int(nodeStyle.marginRight),\n      bottom: innerHeight(boundNode) - outerHeight(node) - node.offsetTop +\n        int(boundNodeStyle.paddingBottom) - int(nodeStyle.marginBottom)\n    };\n  }\n\n  // Keep x and y below right and bottom limits...\n  if (isNum(bounds.right)) x = Math.min(x, bounds.right);\n  if (isNum(bounds.bottom)) y = Math.min(y, bounds.bottom);\n\n  // But above left and top limits.\n  if (isNum(bounds.left)) x = Math.max(x, bounds.left);\n  if (isNum(bounds.top)) y = Math.max(y, bounds.top);\n\n  return [x, y];\n}\n\nexport function snapToGrid(grid: [number, number], pendingX: number, pendingY: number): [number, number] {\n  const x = Math.round(pendingX / grid[0]) * grid[0];\n  const y = Math.round(pendingY / grid[1]) * grid[1];\n  return [x, y];\n}\n\nexport function canDragX(draggable: Draggable | PositionedDraggable): boolean {\n  return draggable.props.axis === 'both' || draggable.props.axis === 'x';\n}\n\nexport function canDragY(draggable: Draggable | PositionedDraggable): boolean {\n  return draggable.props.axis === 'both' || draggable.props.axis === 'y';\n}\n\n// Get {x, y} positions from event.\nexport function getControlPosition(e: MouseTouchEvent, touchIdentifier: ?number, draggableCore: DraggableCore): ?ControlPosition {\n  const touchObj = typeof touchIdentifier === 'number' ? getTouch(e, touchIdentifier) : null;\n  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch\n  const node = findDOMNode(draggableCore);\n  // User can provide an offsetParent if desired.\n  const offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;\n  return offsetXYFromParent(touchObj || e, offsetParent);\n}\n\n// Create an data object exposed by <DraggableCore>'s events\nexport function createCoreData(draggable: DraggableCore, x: number, y: number): DraggableData {\n  const state = draggable.state;\n  const isStart = !isNum(state.lastX);\n  const node = findDOMNode(draggable);\n\n  if (isStart) {\n    // If this is our first move, use the x and y as last coords.\n    return {\n      node,\n      deltaX: 0, deltaY: 0,\n      lastX: x, lastY: y,\n      x, y,\n    };\n  } else {\n    // Otherwise calculate proper values.\n    return {\n      node,\n      deltaX: x - state.lastX, deltaY: y - state.lastY,\n      lastX: state.lastX, lastY: state.lastY,\n      x, y,\n    };\n  }\n}\n\n// Create an data exposed by <Draggable>'s events\nexport function createDraggableData(draggable: Draggable | PositionedDraggable, coreData: DraggableData): DraggableData {\n  return {\n    node: coreData.node,\n    x: draggable.state.x + coreData.deltaX,\n    y: draggable.state.y + coreData.deltaY,\n    deltaX: coreData.deltaX,\n    deltaY: coreData.deltaY,\n    lastX: draggable.state.x,\n    lastY: draggable.state.y\n  };\n}\n\n// A lot faster than stringify/parse\nfunction cloneBounds(bounds: Bounds): Bounds {\n  return {\n    left: bounds.left,\n    top: bounds.top,\n    right: bounds.right,\n    bottom: bounds.bottom\n  };\n}\n\nfunction findDOMNode(draggable: Draggable | DraggableCore | PositionedDraggable): HTMLElement {\n  const node = ReactDOM.findDOMNode(draggable);\n  if (!node) {\n    throw new Error('<DraggableCore>: Unmounted during event!');\n  }\n  // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME\n  return node;\n}\n","// @flow\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport {matchesSelectorAndParentsTo, addEvent, removeEvent, addUserSelectStyles, getTouchIdentifier,\n        removeUserSelectStyles, styleHacks} from './utils/domFns';\nimport {createCoreData, getControlPosition, snapToGrid} from './utils/positionFns';\nimport {dontSetMe} from './utils/shims';\nimport log from './utils/log';\n\nimport type {EventHandler, MouseTouchEvent} from './utils/types';\nimport type {Element as ReactElement} from 'react';\n\n// Simple abstraction for dragging events names.\nconst eventsFor = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend'\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup'\n  }\n};\n\n// Default to mouse events.\nlet dragEventFor = eventsFor.mouse;\n\ntype DraggableCoreState = {\n  dragging: boolean,\n  lastX: number,\n  lastY: number,\n  touchIdentifier: ?number\n};\n\nexport type DraggableBounds = {\n  left: number,\n  right: number,\n  top: number,\n  bottom: number,\n};\n\nexport type DraggableData = {\n  node: HTMLElement,\n  x: number, y: number,\n  deltaX: number, deltaY: number,\n  lastX: number, lastY: number,\n};\n\nexport type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void;\n\nexport type ControlPosition = {x: number, y: number};\n\nexport type DraggableCoreProps = {\n  allowAnyClick: boolean,\n  cancel: string,\n  children: ReactElement<any>,\n  disabled: boolean,\n  enableUserSelectHack: boolean,\n  offsetParent: HTMLElement,\n  grid: [number, number],\n  handle: string,\n  onStart: DraggableEventHandler,\n  onDrag: DraggableEventHandler,\n  onStop: DraggableEventHandler,\n  onMouseDown: (e: MouseEvent) => void,\n};\n\n//\n// Define <DraggableCore>.\n//\n// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can\n// work well with libraries that require more control over the element.\n//\n\nexport default class DraggableCore extends React.Component<DraggableCoreProps, DraggableCoreState> {\n\n  static displayName = 'DraggableCore';\n\n  static propTypes = {\n    /**\n     * `allowAnyClick` allows dragging using any mouse button.\n     * By default, we only accept the left button.\n     *\n     * Defaults to `false`.\n     */\n    allowAnyClick: PropTypes.bool,\n\n    /**\n     * `disabled`, if true, stops the <Draggable> from dragging. All handlers,\n     * with the exception of `onMouseDown`, will not fire.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * By default, we add 'user-select:none' attributes to the document body\n     * to prevent ugly text selection during drag. If this is causing problems\n     * for your app, set this to `false`.\n     */\n    enableUserSelectHack: PropTypes.bool,\n\n    /**\n     * `offsetParent`, if set, uses the passed DOM node to compute drag offsets\n     * instead of using the parent node.\n     */\n    offsetParent: function(props: DraggableCoreProps, propName: $Keys<DraggableCoreProps>) {\n      if (props[propName] && props[propName].nodeType !== 1) {\n        throw new Error('Draggable\\'s offsetParent must be a DOM Node.');\n      }\n    },\n\n    /**\n     * `grid` specifies the x and y that dragging should snap to.\n     */\n    grid: PropTypes.arrayOf(PropTypes.number),\n\n    /**\n     * `handle` specifies a selector to be used as the handle that initiates drag.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   let App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable handle=\".handle\">\n     *              <div>\n     *                  <div className=\"handle\">Click me to drag</div>\n     *                  <div>This is some other content</div>\n     *              </div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    handle: PropTypes.string,\n\n    /**\n     * `cancel` specifies a selector to be used to prevent drag initialization.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   let App = React.createClass({\n     *       render: function () {\n     *           return(\n     *               <Draggable cancel=\".cancel\">\n     *                   <div>\n     *                     <div className=\"cancel\">You can't drag from here</div>\n     *                     <div>Dragging here works fine</div>\n     *                   </div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    cancel: PropTypes.string,\n\n    /**\n     * Called when dragging starts.\n     * If this function returns the boolean false, dragging will be canceled.\n     */\n    onStart: PropTypes.func,\n\n    /**\n     * Called while dragging.\n     * If this function returns the boolean false, dragging will be canceled.\n     */\n    onDrag: PropTypes.func,\n\n    /**\n     * Called when dragging stops.\n     * If this function returns the boolean false, the drag will remain active.\n     */\n    onStop: PropTypes.func,\n\n    /**\n     * A workaround option which can be passed if onMouseDown needs to be accessed,\n     * since it'll always be blocked (as there is internal use of onMouseDown)\n     */\n    onMouseDown: PropTypes.func,\n\n    /**\n     * These properties should be defined on the child, not here.\n     */\n    className: dontSetMe,\n    style: dontSetMe,\n    transform: dontSetMe\n  };\n\n  static defaultProps = {\n    allowAnyClick: false, // by default only accept left click\n    cancel: null,\n    disabled: false,\n    enableUserSelectHack: true,\n    offsetParent: null,\n    handle: null,\n    grid: null,\n    transform: null,\n    onStart: function(){},\n    onDrag: function(){},\n    onStop: function(){},\n    onMouseDown: function(){}\n  };\n\n  state = {\n    dragging: false,\n    // Used while dragging to determine deltas.\n    lastX: NaN, lastY: NaN,\n    touchIdentifier: null\n  };\n\n  componentWillUnmount() {\n    // Remove any leftover event handlers. Remove both touch and mouse handlers in case\n    // some browser quirk caused a touch event to fire during a mouse move, or vice versa.\n    const thisNode = ReactDOM.findDOMNode(this);\n    if (thisNode) {\n      const {ownerDocument} = thisNode;\n      removeEvent(ownerDocument, eventsFor.mouse.move, this.handleDrag);\n      removeEvent(ownerDocument, eventsFor.touch.move, this.handleDrag);\n      removeEvent(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);\n      removeEvent(ownerDocument, eventsFor.touch.stop, this.handleDragStop);\n      if (this.props.enableUserSelectHack) removeUserSelectStyles(ownerDocument);\n    }\n  }\n\n  handleDragStart: EventHandler<MouseTouchEvent> = (e) => {\n    // Make it possible to attach event handlers on top of this one.\n    this.props.onMouseDown(e);\n\n    // Only accept left-clicks.\n    if (!this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false;\n\n    // Get nodes. Be sure to grab relative document (could be iframed)\n    const thisNode = ReactDOM.findDOMNode(this);\n    if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {\n      throw new Error('<DraggableCore> not mounted on DragStart!');\n    }\n    const {ownerDocument} = thisNode;\n\n    // Short circuit if handle or cancel prop was provided and selector doesn't match.\n    if (this.props.disabled ||\n      (!(e.target instanceof ownerDocument.defaultView.Node)) ||\n      (this.props.handle && !matchesSelectorAndParentsTo(e.target, this.props.handle, thisNode)) ||\n      (this.props.cancel && matchesSelectorAndParentsTo(e.target, this.props.cancel, thisNode))) {\n      return;\n    }\n\n    // Set touch identifier in component state if this is a touch event. This allows us to\n    // distinguish between individual touches on multitouch screens by identifying which\n    // touchpoint was set to this element.\n    const touchIdentifier = getTouchIdentifier(e);\n    this.setState({touchIdentifier});\n\n    // Get the current drag point from the event. This is used as the offset.\n    const position = getControlPosition(e, touchIdentifier, this);\n    if (position == null) return; // not possible but satisfies flow\n    const {x, y} = position;\n\n    // Create an event object with all the data parents need to make a decision here.\n    const coreEvent = createCoreData(this, x, y);\n\n    log('DraggableCore: handleDragStart: %j', coreEvent);\n\n    // Call event handler. If it returns explicit false, cancel.\n    log('calling', this.props.onStart);\n    const shouldUpdate = this.props.onStart(e, coreEvent);\n    if (shouldUpdate === false) return;\n\n    // Add a style to the body to disable user-select. This prevents text from\n    // being selected all over the page.\n    if (this.props.enableUserSelectHack) addUserSelectStyles(ownerDocument);\n\n    // Initiate dragging. Set the current x and y as offsets\n    // so we know how much we've moved during the drag. This allows us\n    // to drag elements around even if they have been moved, without issue.\n    this.setState({\n      dragging: true,\n\n      lastX: x,\n      lastY: y\n    });\n\n    // Add events to the document directly so we catch when the user's mouse/touch moves outside of\n    // this element. We use different events depending on whether or not we have detected that this\n    // is a touch-capable device.\n    addEvent(ownerDocument, dragEventFor.move, this.handleDrag);\n    addEvent(ownerDocument, dragEventFor.stop, this.handleDragStop);\n  };\n\n  handleDrag: EventHandler<MouseTouchEvent> = (e) => {\n\n    // Prevent scrolling on mobile devices, like ipad/iphone.\n    if (e.type === 'touchmove') e.preventDefault();\n\n    // Get the current drag point from the event. This is used as the offset.\n    const position = getControlPosition(e, this.state.touchIdentifier, this);\n    if (position == null) return;\n    let {x, y} = position;\n\n    // Snap to grid if prop has been provided\n    if (Array.isArray(this.props.grid)) {\n      let deltaX = x - this.state.lastX, deltaY = y - this.state.lastY;\n      [deltaX, deltaY] = snapToGrid(this.props.grid, deltaX, deltaY);\n      if (!deltaX && !deltaY) return; // skip useless drag\n      x = this.state.lastX + deltaX, y = this.state.lastY + deltaY;\n    }\n\n    const coreEvent = createCoreData(this, x, y);\n\n    log('DraggableCore: handleDrag: %j', coreEvent);\n\n    // Call event handler. If it returns explicit false, trigger end.\n    const shouldUpdate = this.props.onDrag(e, coreEvent);\n    if (shouldUpdate === false) {\n      try {\n        // $FlowIgnore\n        this.handleDragStop(new MouseEvent('mouseup'));\n      } catch (err) {\n        // Old browsers\n        const event = ((document.createEvent('MouseEvents'): any): MouseTouchEvent);\n        // I see why this insanity was deprecated\n        // $FlowIgnore\n        event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        this.handleDragStop(event);\n      }\n      return;\n    }\n\n    this.setState({\n      lastX: x,\n      lastY: y\n    });\n  };\n\n  handleDragStop: EventHandler<MouseTouchEvent> = (e) => {\n    if (!this.state.dragging) return;\n\n    const position = getControlPosition(e, this.state.touchIdentifier, this);\n    if (position == null) return;\n    const {x, y} = position;\n    const coreEvent = createCoreData(this, x, y);\n\n    const thisNode = ReactDOM.findDOMNode(this);\n    if (thisNode) {\n      // Remove user-select hack\n      if (this.props.enableUserSelectHack) removeUserSelectStyles(thisNode.ownerDocument);\n    }\n\n    log('DraggableCore: handleDragStop: %j', coreEvent);\n\n    // Reset the el.\n    this.setState({\n      dragging: false,\n      lastX: NaN,\n      lastY: NaN\n    });\n\n    // Call event handler\n    this.props.onStop(e, coreEvent);\n\n    if (thisNode) {\n      // Remove event handlers\n      log('DraggableCore: Removing handlers');\n      removeEvent(thisNode.ownerDocument, dragEventFor.move, this.handleDrag);\n      removeEvent(thisNode.ownerDocument, dragEventFor.stop, this.handleDragStop);\n    }\n  };\n\n  onMouseDown: EventHandler<MouseTouchEvent> = (e) => {\n    dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse\n\n    return this.handleDragStart(e);\n  };\n\n  onMouseUp: EventHandler<MouseTouchEvent> = (e) => {\n    dragEventFor = eventsFor.mouse;\n\n    return this.handleDragStop(e);\n  };\n\n  // Same as onMouseDown (start drag), but now consider this a touch device.\n  onTouchStart: EventHandler<MouseTouchEvent> = (e) => {\n    // We're on a touch device now, so change the event handlers\n    dragEventFor = eventsFor.touch;\n\n    return this.handleDragStart(e);\n  };\n\n  onTouchEnd: EventHandler<MouseTouchEvent> = (e) => {\n    // We're on a touch device now, so change the event handlers\n    dragEventFor = eventsFor.touch;\n\n    return this.handleDragStop(e);\n  };\n\n  render() {\n    // Reuse the child provided\n    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n    return React.cloneElement(React.Children.only(this.props.children), {\n      style: styleHacks(this.props.children.props.style),\n\n      // Note: mouseMove handler is attached to document so it will still function\n      // when the user drags quickly and leaves the bounds of the element.\n      onMouseDown: this.onMouseDown,\n      onTouchStart: this.onTouchStart,\n      onMouseUp: this.onMouseUp,\n      onTouchEnd: this.onTouchEnd\n    });\n  }\n}\n","// @flow\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport {createCSSTransform, createSVGTransform} from './utils/domFns';\nimport {canDragX, canDragY, createDraggableData, getBoundPosition} from './utils/positionFns';\nimport {dontSetMe} from './utils/shims';\nimport DraggableCore from './DraggableCore';\nimport type {ControlPosition, DraggableBounds, DraggableCoreProps} from './DraggableCore';\nimport log from './utils/log';\nimport type {DraggableEventHandler} from './utils/types';\nimport type {Element as ReactElement} from 'react';\n\ntype DraggableState = {\n  dragging: boolean,\n  dragged: boolean,\n  x: number, y: number,\n  slackX: number, slackY: number,\n  isElementSVG: boolean\n};\n\nexport type DraggableProps = {\n  ...$Exact<DraggableCoreProps>,\n  axis: 'both' | 'x' | 'y' | 'none',\n  bounds: DraggableBounds | string | false,\n  defaultClassName: string,\n  defaultClassNameDragging: string,\n  defaultClassNameDragged: string,\n  defaultPosition: ControlPosition,\n  position: ControlPosition,\n};\n\n//\n// Define <Draggable>\n//\n\nexport default class Draggable extends React.Component<DraggableProps, DraggableState> {\n\n  static displayName = 'Draggable';\n\n  static propTypes = {\n    // Accepts all props <DraggableCore> accepts.\n    ...DraggableCore.propTypes,\n\n    /**\n     * `axis` determines which axis the draggable can move.\n     *\n     *  Note that all callbacks will still return data as normal. This only\n     *  controls flushing to the DOM.\n     *\n     * 'both' allows movement horizontally and vertically.\n     * 'x' limits movement to horizontal axis.\n     * 'y' limits movement to vertical axis.\n     * 'none' limits all movement.\n     *\n     * Defaults to 'both'.\n     */\n    axis: PropTypes.oneOf(['both', 'x', 'y', 'none']),\n\n    /**\n     * `bounds` determines the range of movement available to the element.\n     * Available values are:\n     *\n     * 'parent' restricts movement within the Draggable's parent node.\n     *\n     * Alternatively, pass an object with the following properties, all of which are optional:\n     *\n     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n     *\n     * All values are in px.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   let App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable bounds={{right: 300, bottom: 300}}>\n     *              <div>Content</div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    bounds: PropTypes.oneOfType([\n      PropTypes.shape({\n        left: PropTypes.number,\n        right: PropTypes.number,\n        top: PropTypes.number,\n        bottom: PropTypes.number\n      }),\n      PropTypes.string,\n      PropTypes.oneOf([false])\n    ]),\n\n    defaultClassName: PropTypes.string,\n    defaultClassNameDragging: PropTypes.string,\n    defaultClassNameDragged: PropTypes.string,\n\n    /**\n     * `defaultPosition` specifies the x and y that the dragged item should start at\n     *\n     * Example:\n     *\n     * ```jsx\n     *      let App = React.createClass({\n     *          render: function () {\n     *              return (\n     *                  <Draggable defaultPosition={{x: 25, y: 25}}>\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n     *                  </Draggable>\n     *              );\n     *          }\n     *      });\n     * ```\n     */\n    defaultPosition: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number\n    }),\n\n    /**\n     * `position`, if present, defines the current position of the element.\n     *\n     *  This is similar to how form elements in React work - if no `position` is supplied, the component\n     *  is uncontrolled.\n     *\n     * Example:\n     *\n     * ```jsx\n     *      let App = React.createClass({\n     *          render: function () {\n     *              return (\n     *                  <Draggable position={{x: 25, y: 25}}>\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n     *                  </Draggable>\n     *              );\n     *          }\n     *      });\n     * ```\n     */\n    position: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number\n    }),\n\n    /**\n     * These properties should be defined on the child, not here.\n     */\n    className: dontSetMe,\n    style: dontSetMe,\n    transform: dontSetMe\n  };\n\n  static defaultProps = {\n    ...DraggableCore.defaultProps,\n    axis: 'both',\n    bounds: false,\n    defaultClassName: 'react-draggable',\n    defaultClassNameDragging: 'react-draggable-dragging',\n    defaultClassNameDragged: 'react-draggable-dragged',\n    defaultPosition: {x: 0, y: 0},\n    position: null\n  };\n\n  constructor(props: DraggableProps) {\n    super(props);\n\n    this.state = {\n      // Whether or not we are currently dragging.\n      dragging: false,\n\n      // Whether or not we have been dragged before.\n      dragged: false,\n\n      // Current transform x and y.\n      x: props.position ? props.position.x : props.defaultPosition.x,\n      y: props.position ? props.position.y : props.defaultPosition.y,\n\n      // Used for compensating for out-of-bounds drags\n      slackX: 0, slackY: 0,\n\n      // Can only determine if SVG after mounting\n      isElementSVG: false\n    };\n  }\n\n  componentWillMount() {\n    if (this.props.position && !(this.props.onDrag || this.props.onStop)) {\n      // eslint-disable-next-line\n      console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' +\n        'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' +\n        '`position` of this element.');\n    }\n  }\n\n  componentDidMount() {\n    // Check to see if the element passed is an instanceof SVGElement\n    if(typeof window.SVGElement !== 'undefined' && ReactDOM.findDOMNode(this) instanceof window.SVGElement) {\n      this.setState({ isElementSVG: true });\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Object) {\n    // Set x/y if position has changed\n    if (nextProps.position &&\n        (!this.props.position ||\n          nextProps.position.x !== this.props.position.x ||\n          nextProps.position.y !== this.props.position.y\n        )\n      ) {\n      this.setState({ x: nextProps.position.x, y: nextProps.position.y });\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({dragging: false}); // prevents invariant if unmounted while dragging\n  }\n\n  onDragStart: DraggableEventHandler = (e, coreData) => {\n    log('Draggable: onDragStart: %j', coreData);\n\n    // Short-circuit if user's callback killed it.\n    const shouldStart = this.props.onStart(e, createDraggableData(this, coreData));\n    // Kills start event on core as well, so move handlers are never bound.\n    if (shouldStart === false) return false;\n\n    this.setState({dragging: true, dragged: true});\n  };\n\n  onDrag: DraggableEventHandler = (e, coreData) => {\n    if (!this.state.dragging) return false;\n    log('Draggable: onDrag: %j', coreData);\n\n    const uiData = createDraggableData(this, coreData);\n\n    const newState: $Shape<DraggableState> = {\n      x: uiData.x,\n      y: uiData.y\n    };\n\n    // Keep within bounds.\n    if (this.props.bounds) {\n      // Save original x and y.\n      const {x, y} = newState;\n\n      // Add slack to the values used to calculate bound position. This will ensure that if\n      // we start removing slack, the element won't react to it right away until it's been\n      // completely removed.\n      newState.x += this.state.slackX;\n      newState.y += this.state.slackY;\n\n      // Get bound position. This will ceil/floor the x and y within the boundaries.\n      const [newStateX, newStateY] = getBoundPosition(this, newState.x, newState.y);\n      newState.x = newStateX;\n      newState.y = newStateY;\n\n      // Recalculate slack by noting how much was shaved by the boundPosition handler.\n      newState.slackX = this.state.slackX + (x - newState.x);\n      newState.slackY = this.state.slackY + (y - newState.y);\n\n      // Update the event we fire to reflect what really happened after bounds took effect.\n      uiData.x = newState.x;\n      uiData.y = newState.y;\n      uiData.deltaX = newState.x - this.state.x;\n      uiData.deltaY = newState.y - this.state.y;\n    }\n\n    // Short-circuit if user's callback killed it.\n    const shouldUpdate = this.props.onDrag(e, uiData);\n    if (shouldUpdate === false) return false;\n\n    this.setState(newState);\n  };\n\n  onDragStop: DraggableEventHandler = (e, coreData) => {\n    if (!this.state.dragging) return false;\n\n    // Short-circuit if user's callback killed it.\n    const shouldStop = this.props.onStop(e, createDraggableData(this, coreData));\n    if (shouldStop === false) return false;\n\n    log('Draggable: onDragStop: %j', coreData);\n\n    const newState: $Shape<DraggableState> = {\n      dragging: false,\n      slackX: 0,\n      slackY: 0\n    };\n\n    // If this is a controlled component, the result of this operation will be to\n    // revert back to the old position. We expect a handler on `onDragStop`, at the least.\n    const controlled = Boolean(this.props.position);\n    if (controlled) {\n      const {x, y} = this.props.position;\n      newState.x = x;\n      newState.y = y;\n    }\n\n    this.setState(newState);\n  };\n\n  render(): ReactElement<any> {\n    let style = {}, svgTransform = null;\n\n    // If this is controlled, we don't want to move it - unless it's dragging.\n    const controlled = Boolean(this.props.position);\n    const draggable = !controlled || this.state.dragging;\n\n    const position = this.props.position || this.props.defaultPosition;\n    const transformOpts = {\n      // Set left if horizontal drag is enabled\n      x: canDragX(this) && draggable ?\n        this.state.x :\n        position.x,\n\n      // Set top if vertical drag is enabled\n      y: canDragY(this) && draggable ?\n        this.state.y :\n        position.y\n    };\n\n    // If this element was SVG, we use the `transform` attribute.\n    if (this.state.isElementSVG) {\n      svgTransform = createSVGTransform(transformOpts);\n    } else {\n      // Add a CSS transform to move the element around. This allows us to move the element around\n      // without worrying about whether or not it is relatively or absolutely positioned.\n      // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n      // has a clean slate.\n      style = createCSSTransform(transformOpts);\n    }\n\n    const {\n      defaultClassName,\n      defaultClassNameDragging,\n      defaultClassNameDragged\n    } = this.props;\n\n    const children = React.Children.only(this.props.children);\n\n    // Mark with class while dragging\n    const className = classNames((children.props.className || ''), defaultClassName, {\n      [defaultClassNameDragging]: this.state.dragging,\n      [defaultClassNameDragged]: this.state.dragged\n    });\n\n    // Reuse the child provided\n    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n    return (\n      <DraggableCore {...this.props} onStart={this.onDragStart} onDrag={this.onDrag} onStop={this.onDragStop}>\n        {React.cloneElement(children, {\n          className: className,\n          style: {...children.props.style, ...style},\n          transform: svgTransform\n        })}\n      </DraggableCore>\n    );\n  }\n}\n","// @flow\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport {createCSSTransform, createSVGTransform, offsetXYFromParent} from './utils/domFns';\nimport {canDragX, canDragY, createDraggableData, getBoundPosition} from './utils/positionFns';\nimport {dontSetMe} from './utils/shims';\nimport DraggableCore from './DraggableCore';\nimport type {ControlPosition, DraggableBounds, DraggableCoreProps} from './DraggableCore';\nimport log from './utils/log';\nimport type {DraggableEventHandler} from './utils/types';\nimport type {Element as ReactElement} from 'react';\n\ntype DraggableState = {\n  dragging: boolean,\n  dragged: boolean,\n  x: number, y: number,\n  slackX: number, slackY: number,\n  isElementSVG: boolean\n};\n\nexport type DraggableProps = {\n  ...$Exact<DraggableCoreProps>,\n  axis: 'both' | 'x' | 'y' | 'none',\n  bounds: DraggableBounds | string | false,\n  defaultClassName: string,\n  defaultClassNameDragging: string,\n  defaultClassNameDragged: string,\n  defaultPosition: ControlPosition,\n  position: ControlPosition,\n  styleFix: Object\n};\n\nfunction getCurrentPosition(draggable) {\n  const node = ReactDOM.findDOMNode(draggable);\n  const rect = node.getBoundingClientRect();\n  const offsetParent = draggable.props.offsetParent || node.offsetParent || node.ownerDocument.body;\n  return offsetXYFromParent({clientX: rect.left, clientY: rect.top}, offsetParent);\n}\n\n//\n// Define <PositionedDraggable>\n//\n\nexport default class PositionedDraggable extends React.Component<DraggableProps, DraggableState> {\n\n  static displayName = 'Draggable';\n\n  static propTypes = {\n    // Accepts all props <DraggableCore> accepts.\n    ...DraggableCore.propTypes,\n\n    /**\n     * `axis` determines which axis the draggable can move.\n     *\n     *  Note that all callbacks will still return data as normal. This only\n     *  controls flushing to the DOM.\n     *\n     * 'both' allows movement horizontally and vertically.\n     * 'x' limits movement to horizontal axis.\n     * 'y' limits movement to vertical axis.\n     * 'none' limits all movement.\n     *\n     * Defaults to 'both'.\n     */\n    axis: PropTypes.oneOf(['both', 'x', 'y', 'none']),\n\n    /**\n     * `bounds` determines the range of movement available to the element.\n     * Available values are:\n     *\n     * 'parent' restricts movement within the Draggable's parent node.\n     *\n     * Alternatively, pass an object with the following properties, all of which are optional:\n     *\n     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n     *\n     * All values are in px.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   let App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable bounds={{right: 300, bottom: 300}}>\n     *              <div>Content</div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    bounds: PropTypes.oneOfType([\n      PropTypes.shape({\n        left: PropTypes.number,\n        right: PropTypes.number,\n        top: PropTypes.number,\n        bottom: PropTypes.number\n      }),\n      PropTypes.string,\n      PropTypes.oneOf([false])\n    ]),\n\n    defaultClassName: PropTypes.string,\n    defaultClassNameDragging: PropTypes.string,\n    defaultClassNameDragged: PropTypes.string,\n\n    /**\n     * `defaultPosition` specifies the x and y that the dragged item should start at\n     *\n     * Example:\n     *\n     * ```jsx\n     *      let App = React.createClass({\n     *          render: function () {\n     *              return (\n     *                  <Draggable defaultPosition={{x: 25, y: 25}}>\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n     *                  </Draggable>\n     *              );\n     *          }\n     *      });\n     * ```\n     */\n    defaultPosition: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number\n    }),\n\n    /**\n     * `position`, if present, defines the current position of the element.\n     *\n     *  This is similar to how form elements in React work - if no `position` is supplied, the component\n     *  is uncontrolled.\n     *\n     * Example:\n     *\n     * ```jsx\n     *      let App = React.createClass({\n     *          render: function () {\n     *              return (\n     *                  <Draggable position={{x: 25, y: 25}}>\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n     *                  </Draggable>\n     *              );\n     *          }\n     *      });\n     * ```\n     */\n    position: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number\n    }),\n\n    /**\n     * These properties should be defined on the child, not here.\n     */\n    className: dontSetMe,\n    style: dontSetMe,\n    transform: dontSetMe\n  };\n\n  static defaultProps = {\n    ...DraggableCore.defaultProps,\n    axis: 'both',\n    bounds: false,\n    defaultClassName: 'react-draggable',\n    defaultClassNameDragging: 'react-draggable-dragging',\n    defaultClassNameDragged: 'react-draggable-dragged',\n    defaultPosition: {x: 0, y: 0},\n    position: null\n  };\n\n  constructor(props: DraggableProps) {\n    super(props);\n\n    this.state = {\n      // Whether or not we are currently dragging.\n      dragging: false,\n\n      // Whether or not we have been dragged before.\n      dragged: false,\n\n      // Current transform x and y.\n      x: props.position ? props.position.x : props.defaultPosition.x,\n      y: props.position ? props.position.y : props.defaultPosition.y,\n\n      // Used for compensating for out-of-bounds drags\n      slackX: 0, slackY: 0,\n\n      // Can only determine if SVG after mounting\n      isElementSVG: false,\n      styleFix: {}\n    };\n  }\n\n  componentWillMount() {\n    if (this.props.position && !(this.props.onDrag || this.props.onStop)) {\n      // eslint-disable-next-line\n      console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' +\n        'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' +\n        '`position` of this element.');\n    }\n  }\n\n  componentDidMount() {\n    // Check to see if the element passed is an instanceof SVGElement\n    if(typeof window.SVGElement !== 'undefined' && ReactDOM.findDOMNode(this) instanceof window.SVGElement) {\n      this.setState({ isElementSVG: true });\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Object) {\n    // Set x/y if position has changed\n    if (nextProps.position &&\n        (!this.props.position ||\n          nextProps.position.x !== this.props.position.x ||\n          nextProps.position.y !== this.props.position.y\n        )\n      ) {\n      this.setState({ x: nextProps.position.x, y: nextProps.position.y });\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({dragging: false}); // prevents invariant if unmounted while dragging\n  }\n\n  onDragStart: DraggableEventHandler = (e, coreData) => {\n    log('Draggable: onDragStart: %j', coreData);\n\n    // Short-circuit if user's callback killed it.\n    const shouldStart = this.props.onStart(e, createDraggableData(this, coreData));\n    // Kills start event on core as well, so move handlers are never bound.\n    if (shouldStart === false) return false;\n\n    let position = {};\n    if (!this.state.dragged && !this.props.position) {\n      position = getCurrentPosition(this);\n    }\n    this.setState({dragging: true, dragged: true, ...position, styleFix: { left: 0, top: 0, bottom: \"auto\", right: \"auto\" }});\n  };\n\n  onDrag: DraggableEventHandler = (e, coreData) => {\n    if (!this.state.dragging) return false;\n    log('Draggable: onDrag: %j', coreData);\n\n    const uiData = createDraggableData(this, coreData);\n\n    const newState: $Shape<DraggableState> = {\n      x: uiData.x,\n      y: uiData.y\n    };\n\n    // Keep within bounds.\n    if (this.props.bounds) {\n      // Save original x and y.\n      const {x, y} = newState;\n\n      // Add slack to the values used to calculate bound position. This will ensure that if\n      // we start removing slack, the element won't react to it right away until it's been\n      // completely removed.\n      newState.x += this.state.slackX;\n      newState.y += this.state.slackY;\n\n      // Get bound position. This will ceil/floor the x and y within the boundaries.\n      const [newStateX, newStateY] = getBoundPosition(this, newState.x, newState.y);\n      newState.x = newStateX;\n      newState.y = newStateY;\n\n      // Recalculate slack by noting how much was shaved by the boundPosition handler.\n      newState.slackX = this.state.slackX + (x - newState.x);\n      newState.slackY = this.state.slackY + (y - newState.y);\n\n      // Update the event we fire to reflect what really happened after bounds took effect.\n      uiData.x = newState.x;\n      uiData.y = newState.y;\n      uiData.deltaX = newState.x - this.state.x;\n      uiData.deltaY = newState.y - this.state.y;\n    }\n\n    // Short-circuit if user's callback killed it.\n    const shouldUpdate = this.props.onDrag(e, uiData);\n    if (shouldUpdate === false) return false;\n\n    this.setState(newState);\n  };\n\n  onDragStop: DraggableEventHandler = (e, coreData) => {\n    if (!this.state.dragging) return false;\n\n    // Short-circuit if user's callback killed it.\n    const shouldStop = this.props.onStop(e, createDraggableData(this, coreData));\n    if (shouldStop === false) return false;\n\n    log('Draggable: onDragStop: %j', coreData);\n\n    const newState: $Shape<DraggableState> = {\n      dragging: false,\n      slackX: 0,\n      slackY: 0\n    };\n\n    // If this is a controlled component, the result of this operation will be to\n    // revert back to the old position. We expect a handler on `onDragStop`, at the least.\n    const controlled = Boolean(this.props.position);\n    if (controlled) {\n      const {x, y} = this.props.position;\n      newState.x = x;\n      newState.y = y;\n    }\n\n    this.setState(newState);\n  };\n\n  render(): ReactElement<any> {\n    let style = {}, svgTransform = null;\n\n    // If this is controlled, we don't want to move it - unless it's dragging.\n    const controlled = Boolean(this.props.position);\n    const draggable = !controlled || this.state.dragging;\n\n    if (this.state.dragged || this.props.position) {\n      const position = this.props.position || this.props.defaultPosition;\n      const transformOpts = {\n        // Set left if horizontal drag is enabled\n        x: canDragX(this) && draggable ?\n          this.state.x :\n          position.x,\n\n        // Set top if vertical drag is enabled\n        y: canDragY(this) && draggable ?\n          this.state.y :\n          position.y\n      };\n\n      // If this element was SVG, we use the `transform` attribute.\n      if (this.state.isElementSVG) {\n        svgTransform = createSVGTransform(transformOpts);\n      } else {\n        // Add a CSS transform to move the element around. This allows us to move the element around\n        // without worrying about whether or not it is relatively or absolutely positioned.\n        // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n        // has a clean slate.\n        style = createCSSTransform(transformOpts);\n      }\n\n      style = { ...this.state.styleFix, ...style };\n    }\n\n    const {\n      defaultClassName,\n      defaultClassNameDragging,\n      defaultClassNameDragged\n    } = this.props;\n\n    const children = React.Children.only(this.props.children);\n\n    // Mark with class while dragging\n    const className = classNames((children.props.className || ''), defaultClassName, {\n      [defaultClassNameDragging]: this.state.dragging,\n      [defaultClassNameDragged]: this.state.dragged\n    });\n\n    // Reuse the child provided\n    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n    return (\n      <DraggableCore {...this.props} onStart={this.onDragStart} onDrag={this.onDrag} onStop={this.onDragStop}>\n        {React.cloneElement(children, {\n          className: className,\n          style: {...children.props.style, ...style},\n          transform: svgTransform\n        })}\n      </DraggableCore>\n    );\n  }\n}\n","import Draggable from './Draggable';\nimport DraggableCore from './DraggableCore';\nimport PositionedDraggable from './PositionedDraggable';\n\n// Previous versions of this lib exported <Draggable> as the root export. As to not break\n// them, or TypeScript, we export *both* as the root and as 'default'.\n// See https://github.com/mzabriskie/react-draggable/pull/254\n// and https://github.com/mzabriskie/react-draggable/issues/266\nDraggable.default = Draggable;\nDraggable.DraggableCore = DraggableCore;\nDraggable.PositionedDraggable = PositionedDraggable;\n\nexport default Draggable;\n"],"names":["getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","assign","test1","String","getOwnPropertyNames","test2","i","fromCharCode","map","n","join","test3","split","forEach","letter","keys","err","shouldUseNative","emptyFunction","module","shim","props","propName","componentName","location","propFullName","secret","ReactPropTypesSecret","Error","name","getShim","isRequired","ReactPropTypes","array","bool","func","number","object","string","symbol","any","arrayOf","element","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","require$$1","hasOwn","classNames","classes","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","exports","default","window","findInArray","callback","isFunction","toString","isNum","num","isNaN","int","a","parseInt","dontSetMe","prefixes","browserPrefixToKey","prop","prefix","str","out","shouldCapitalize","toUpperCase","kebabToTitleCase","document","style","documentElement","getPrefix","matchesSelectorFunc","matchesSelector","el","selector","method","matchesSelectorAndParentsTo","baseNode","parentNode","addEvent","event","handler","attachEvent","addEventListener","removeEvent","detachEvent","removeEventListener","offsetXYFromParent","evt","offsetParent","offsetParentRect","ownerDocument","body","left","top","getBoundingClientRect","x","clientX","scrollLeft","y","clientY","scrollTop","createCSSTransform","browserPrefix","createSVGTransform","addUserSelectStyles","doc","className","styleEl","getElementById","createElement","type","id","innerHTML","getElementsByTagName","appendChild","classList","add","match","RegExp","removeUserSelectStyles","remove","replace","selection","empty","getSelection","removeAllRanges","e","getBoundPosition","draggable","bounds","right","bottom","cloneBounds","findDOMNode","ownerWindow","defaultView","boundNode","querySelector","HTMLElement","nodeStyle","getComputedStyle","boundNodeStyle","offsetLeft","paddingLeft","marginLeft","offsetTop","paddingTop","marginTop","width","clientWidth","computedStyle","paddingRight","innerWidth","borderLeftWidth","borderRightWidth","outerWidth","marginRight","height","clientHeight","paddingBottom","innerHeight","borderTopWidth","borderBottomWidth","outerHeight","marginBottom","Math","min","max","canDragX","axis","canDragY","getControlPosition","touchIdentifier","draggableCore","touchObj","identifier","targetTouches","t","changedTouches","getTouch","createCoreData","state","isStart","lastX","deltaY","lastY","createDraggableData","coreData","deltaX","ReactDOM","eventsFor","dragEventFor","mouse","DraggableCore","NaN","handleDragStart","onMouseDown","_this","allowAnyClick","button","thisNode","disabled","target","Node","handle","cancel","getTouchIdentifier","setState","position","coreEvent","onStart","enableUserSelectHack","move","handleDrag","stop","handleDragStop","preventDefault","grid","pendingX","pendingY","round","onDrag","MouseEvent","createEvent","initMouseEvent","dragging","onStop","onMouseUp","onTouchStart","touch","onTouchEnd","this","React","cloneElement","Children","only","children","childStyle","styleHacks","Component","displayName","propTypes","nodeType","defaultProps","Draggable","onDragStart","dragged","uiData","newState","slackX","slackY","newStateX","newStateY","onDragStop","Boolean","defaultPosition","warn","SVGElement","isElementSVG","nextProps","svgTransform","transformOpts","defaultClassName","defaultClassNameDragging","defaultClassNameDragged","PositionedDraggable","rect","styleFix"],"mappings":"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"}